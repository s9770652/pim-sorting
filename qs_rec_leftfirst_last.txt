quick_sort:                             // @quick_sort
.Lfunc_begin1:
	.loc	3 182 0                         // benchmark/quick_sorts.c:182:0
	.cfi_startproc
// %bb.0:
	//DEBUG_VALUE: quick_sort:start <- $r0
	//DEBUG_VALUE: quick_sort:end <- $r1
	.cfi_def_cfa_offset -16
	.cfi_offset 23, -8
	.cfi_offset 22, -4
	sd r22, 8, d22
	add r22, r22, 16
	.cfi_offset 15, -16
	.cfi_offset 14, -12
.Ltmp10:
	sd r22, -16, d14
.Ltmp11:
	//DEBUG_VALUE: quick_sort:left <- $r0
	//DEBUG_VALUE: quick_sort:right <- $r1
	move r14, r1
.Ltmp12:
	//DEBUG_VALUE: quick_sort:right <- $r14
	//DEBUG_VALUE: quick_sort:left <- $r0
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:start <- $r0
	.loc	3 184 9 prologue_end            // benchmark/quick_sorts.c:184:9
	jgtu r14, r0, .LBB1_1
.Ltmp13:
.LBB1_13:
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:right <- $r14
	.loc	3 193 1                         // benchmark/quick_sorts.c:193:1
	ld d14, r22, -16
.Ltmp14:
	ld d22, r22, -8
	jump r23
.LBB1_12:                               //   in Loop: Header=BB1_1 Depth=1
.Ltmp15:
	//DEBUG_VALUE: swap:a <- $r15
	//DEBUG_VALUE: quick_sort:i <- $r15
	//DEBUG_VALUE: quick_sort:pivot <- $r14
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:right <- $r14
	//DEBUG_VALUE: quick_sort:j <- $r1
	//DEBUG_VALUE: quick_sort:start <- $r0
	//DEBUG_VALUE: swap:b <- $r14
	//DEBUG_VALUE: swap:temp <- $r3
	.file	6 "/home/vboxuser/Dokumente/pim/pim-sorting" "benchmark/tester.h"
	.loc	6 46 8                          // benchmark/tester.h:46:8
	sw r15, 0, r2
	.loc	6 47 8                          // benchmark/tester.h:47:8
	sw r14, 0, r3
.Ltmp16:
	.loc	3 190 5                         // benchmark/quick_sorts.c:190:5
	add r1, r15, -4
.Ltmp17:
	call r23, quick_sort
.Ltmp18:
	.loc	3 184 9                         // benchmark/quick_sorts.c:184:9
	add r0, r15, 4
.Ltmp19:
	//DEBUG_VALUE: quick_sort:right <- $r14
	//DEBUG_VALUE: quick_sort:left <- [DW_OP_plus_uconst 8, DW_OP_stack_value] undef
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:start <- [DW_OP_plus_uconst 8, DW_OP_stack_value] undef
	.loc	3 184 9 is_stmt 0               // benchmark/quick_sorts.c:184:9
	jgeu r0, r14, .LBB1_13
.Ltmp20:
.LBB1_1:                                // =>This Loop Header: Depth=1
                                        //     Child Loop BB1_7 Depth 2
                                        //       Child Loop BB1_8 Depth 3
                                        //       Child Loop BB1_9 Depth 3
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:right <- $r14
	//DEBUG_VALUE: quick_sort:start <- $r0
	.loc	3 185 9 is_stmt 1               // benchmark/quick_sorts.c:185:9
	sub r1, r14, r0
.Ltmp21:
	.loc	3 185 9 is_stmt 0               // benchmark/quick_sorts.c:185:9
	jles r1, 51, .LBB1_2
.Ltmp22:
// %bb.6:                               //   in Loop: Header=BB1_1 Depth=1
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:right <- $r14
	//DEBUG_VALUE: quick_sort:start <- $r0
	//DEBUG_VALUE: quick_sort:pivot <- $r14
	//DEBUG_VALUE: swap:a <- $r14
	//DEBUG_VALUE: swap:b <- $r14
	//DEBUG_VALUE: swap:temp <- undef
	.loc	3 189 5 is_stmt 1               // benchmark/quick_sorts.c:189:5
	add r15, r0, -4
.Ltmp23:
	//DEBUG_VALUE: quick_sort:j <- $r14
	//DEBUG_VALUE: quick_sort:i <- $r15
	.loc	3 0 0 is_stmt 0                 // benchmark/quick_sorts.c:0:0
	move r1, r14
.Ltmp24:
.LBB1_7:                                //   Parent Loop BB1_1 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB1_8 Depth 3
                                        //       Child Loop BB1_9 Depth 3
	//DEBUG_VALUE: quick_sort:i <- $r15
	//DEBUG_VALUE: quick_sort:pivot <- $r14
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:right <- $r14
	//DEBUG_VALUE: quick_sort:start <- $r0
	//DEBUG_VALUE: quick_sort:i <- $r15
	//DEBUG_VALUE: quick_sort:j <- $r1
	lw r2, r14, 0
.Ltmp25:
.LBB1_8:                                //   Parent Loop BB1_1 Depth=1
                                        //     Parent Loop BB1_7 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	//DEBUG_VALUE: quick_sort:i <- $r15
	//DEBUG_VALUE: quick_sort:pivot <- $r14
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:right <- $r14
	//DEBUG_VALUE: quick_sort:j <- $r1
	//DEBUG_VALUE: quick_sort:start <- $r0
	//DEBUG_VALUE: quick_sort:i <- $r15
	.loc	3 189 5                         // benchmark/quick_sorts.c:189:5
	lw r3, r15, 4
	add r15, r15, 4
.Ltmp26:
	//DEBUG_VALUE: quick_sort:i <- $r15
	jltu r3, r2, .LBB1_8
.Ltmp27:
.LBB1_9:                                //   Parent Loop BB1_1 Depth=1
                                        //     Parent Loop BB1_7 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	//DEBUG_VALUE: quick_sort:i <- $r15
	//DEBUG_VALUE: quick_sort:pivot <- $r14
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:right <- $r14
	//DEBUG_VALUE: quick_sort:j <- $r1
	//DEBUG_VALUE: quick_sort:start <- $r0
	//DEBUG_VALUE: quick_sort:j <- $r1
	lw r4, r1, -4
	add r1, r1, -4
.Ltmp28:
	//DEBUG_VALUE: quick_sort:j <- $r1
	jgtu r4, r2, .LBB1_9
.Ltmp29:
// %bb.10:                              //   in Loop: Header=BB1_7 Depth=2
	//DEBUG_VALUE: quick_sort:i <- $r15
	//DEBUG_VALUE: quick_sort:pivot <- $r14
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:right <- $r14
	//DEBUG_VALUE: quick_sort:j <- $r1
	//DEBUG_VALUE: quick_sort:start <- $r0
	//DEBUG_VALUE: swap:a <- $r15
	//DEBUG_VALUE: swap:a <- $r15
	jgeu r15, r1, .LBB1_12
.Ltmp30:
// %bb.11:                              //   in Loop: Header=BB1_7 Depth=2
	//DEBUG_VALUE: swap:a <- $r15
	//DEBUG_VALUE: quick_sort:i <- $r15
	//DEBUG_VALUE: quick_sort:pivot <- $r14
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:right <- $r14
	//DEBUG_VALUE: quick_sort:j <- $r1
	//DEBUG_VALUE: quick_sort:start <- $r0
	//DEBUG_VALUE: swap:b <- $r1
	//DEBUG_VALUE: swap:temp <- $r3
	.loc	6 46 8 is_stmt 1                // benchmark/tester.h:46:8
	sw r15, 0, r4
	.loc	6 47 8                          // benchmark/tester.h:47:8
	sw r1, 0, r3
	jump .LBB1_7
.Ltmp31:
.LBB1_5:                                //   in Loop: Header=BB1_2 Depth=1
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:right <- $r14
	//DEBUG_VALUE: to_sort <- $r1
	//DEBUG_VALUE: insertion_sort_sentinel:i <- $r0
	.loc	3 0 0 is_stmt 0                 // benchmark/quick_sorts.c:0:0
	add r0, r0, 4
.Ltmp32:
	.loc	3 172 15 is_stmt 1              // benchmark/quick_sorts.c:172:15
	sw r2, 0, r1
.Ltmp33:
	//DEBUG_VALUE: insertion_sort_sentinel:curr <- $r0
	//DEBUG_VALUE: insertion_sort_sentinel:i <- [DW_OP_plus_uconst 4, DW_OP_stack_value] $r0
	.loc	3 165 5                         // benchmark/quick_sorts.c:165:5
	jgtu r0, r14, .LBB1_13
.Ltmp34:
.LBB1_2:                                // =>This Loop Header: Depth=1
                                        //     Child Loop BB1_4 Depth 2
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:right <- $r14
	//DEBUG_VALUE: insertion_sort_sentinel:i <- $r0
	//DEBUG_VALUE: prev <- [DW_OP_constu 4, DW_OP_minus, DW_OP_stack_value] $r0
	.loc	3 167 27                        // benchmark/quick_sorts.c:167:27
	lw r1, r0, 0
.Ltmp35:
	//DEBUG_VALUE: insertion_sort_sentinel:curr <- $r0
	//DEBUG_VALUE: to_sort <- $r1
	//DEBUG_VALUE: prev <- [DW_OP_plus_uconst 4294967292, DW_OP_stack_value] $r0
	.loc	3 168 16                        // benchmark/quick_sorts.c:168:16
	lw r3, r0, -4
.Ltmp36:
	.loc	3 0 0 is_stmt 0                 // benchmark/quick_sorts.c:0:0
	move r2, r0
	//DEBUG_VALUE: prev <- [DW_OP_plus_uconst 4294967292, DW_OP_stack_value] $r0
	//DEBUG_VALUE: to_sort <- $r1
.Ltmp37:
	.loc	3 168 9                         // benchmark/quick_sorts.c:168:9
	jleu r3, r1, .LBB1_5
.Ltmp38:
// %bb.3:                               //   in Loop: Header=BB1_2 Depth=1
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:right <- $r14
	//DEBUG_VALUE: to_sort <- $r1
	//DEBUG_VALUE: prev <- [DW_OP_plus_uconst 4294967292, DW_OP_stack_value] $r0
	//DEBUG_VALUE: insertion_sort_sentinel:curr <- $r0
	//DEBUG_VALUE: insertion_sort_sentinel:i <- $r0
	.loc	3 0 9                           // benchmark/quick_sorts.c:0:9
	move r2, r0
.Ltmp39:
.LBB1_4:                                //   Parent Loop BB1_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	//DEBUG_VALUE: quick_sort:end <- $r14
	//DEBUG_VALUE: quick_sort:right <- $r14
	//DEBUG_VALUE: to_sort <- $r1
	//DEBUG_VALUE: insertion_sort_sentinel:i <- $r0
	//DEBUG_VALUE: insertion_sort_sentinel:curr <- undef
	.loc	3 169 19 is_stmt 1              // benchmark/quick_sorts.c:169:19
	sw r2, 0, r3
.Ltmp40:
	//DEBUG_VALUE: insertion_sort_sentinel:curr <- undef
	//DEBUG_VALUE: prev <- [DW_OP_constu 4, DW_OP_minus, DW_OP_stack_value] undef
	.loc	3 168 16                        // benchmark/quick_sorts.c:168:16
	lw r3, r2, -8
	.loc	3 168 9 is_stmt 0               // benchmark/quick_sorts.c:168:9
	add r2, r2, -4
	jgtu r3, r1, .LBB1_4
	jump .LBB1_5
.Ltmp41:
.Lfunc_end1:
	.size	quick_sort, .Lfunc_end1-quick_sort
	.cfi_endproc
	.section	.stack_sizes,"o",@progbits,.text.quick_sort
	.long	.Lfunc_begin1
	.byte	16
	.section	.text.quick_sort,"ax",@progbits
                                        // -- End function